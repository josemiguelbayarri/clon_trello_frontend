[{"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\index.js":"1","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\App.jsx":"2","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Welcome\\Welcome.jsx":"3","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Login\\Login.jsx":"4","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Register\\Register.jsx":"5","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Header\\Header.jsx":"6","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Boards\\Boards.jsx":"7","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\ModalCenter\\ModalCenter.jsx":"8","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\PersonalBoard\\PersonalBoard.jsx":"9","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\util.js":"10","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\ModalTask\\ModalTask.jsx":"11","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\ProtectedRoute\\ProtectedRoute.jsx":"12"},{"size":434,"mtime":1610488883411,"results":"13","hashOfConfig":"14"},{"size":1184,"mtime":1612521246134,"results":"15","hashOfConfig":"14"},{"size":1281,"mtime":1607967007379,"results":"16","hashOfConfig":"14"},{"size":3705,"mtime":1612459348466,"results":"17","hashOfConfig":"14"},{"size":3623,"mtime":1607966981649,"results":"18","hashOfConfig":"14"},{"size":3896,"mtime":1612458836608,"results":"19","hashOfConfig":"14"},{"size":3207,"mtime":1612457725172,"results":"20","hashOfConfig":"14"},{"size":6055,"mtime":1612520733343,"results":"21","hashOfConfig":"14"},{"size":8105,"mtime":1612522682844,"results":"22","hashOfConfig":"14"},{"size":68,"mtime":1610491232739,"results":"23","hashOfConfig":"14"},{"size":2878,"mtime":1610623236633,"results":"24","hashOfConfig":"14"},{"size":446,"mtime":1611227442671,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"11u4jif",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\index.js",[],["56","57"],"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\App.jsx",["58"],"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Boards from \"./components/Boards/Boards\";\nimport Login from \"./components/Login/Login\";\nimport PersonalBoard from \"./components/PersonalBoard/PersonalBoard\";\nimport Register from \"./components/Register/Register\";\nimport Welcome from \"./components/Welcome/Welcome\";\nimport ProtectedRoute from \"./components/ProtectedRoute/ProtectedRoute\";\n\nfunction App() {\n  const [token, setToken] = useState(\"\");\n  useEffect(() => {\n    const _token = localStorage.getItem(\"authToken\");\n    if (_token) {\n      setToken(_token);\n    }\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        {/* {token ? (<Boards />\n          ) : (\n            <Login />\n            )} */}\n\n        <ProtectedRoute path=\"/boards\" exact component={Boards} /> \n        <Route path=\"/login\" exact component={Login} />\n        <Route path=\"/\" exact component={Welcome} />\n        <Route path=\"/register\" exact component={Register} />\n        <Route path=\"/board/:id\" exact component={PersonalBoard} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Welcome\\Welcome.jsx",[],"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Login\\Login.jsx",[],"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Register\\Register.jsx",[],"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Header\\Header.jsx",["59","60","61","62","63","64","65"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\r\nimport DashboardOutlinedIcon from \"@material-ui/icons/DashboardOutlined\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport NotificationsNoneOutlinedIcon from \"@material-ui/icons/NotificationsNoneOutlined\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo_header from \"../Images/logo_header.png\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { deepOrange } from \"@material-ui/core/colors\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useHistory} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst logout = () => {//funcion logout para quitar el usuario\r\n  \r\n  localStorage.removeItem(\"authToken\");//eliminamos el token del localstorage cuando ejecutamos la funcion logout\r\n  \r\n}\r\n\r\nclass Header extends React.Component {\r\n  /* const [token, setToken] = useState(\"\"); */\r\n  \r\n  \r\n  static propTypes = {//esto pertenecio al header reactivo que lo saque de stackoverflow\r\n    match: PropTypes.object.isRequired,\r\n    location: PropTypes.object.isRequired,\r\n    history: PropTypes.object.isRequired,\r\n  };\r\n\r\n  \r\n  \r\n  \r\n\r\n  \r\n  render() {\r\n    /* const classes = useStyles(); */\r\n    const nickLogged = localStorage.getItem(\"name\");//cogemos la propiedad name de localstorage y la guardamos dentro de la variable nicklogged que la usaremos en el html\r\n\r\n\r\n\r\n\r\n    const { match, location, history } = this.props;\r\n\r\n    const headerColor = //en esta variable le pasamos una ruta\r\n      location.pathname === \"/boards\" //que es esta y le indicamos que si estamos en esta ruta\r\n        ? { background: \"#026AA7\" } //el background del header sea este \r\n        : { background: \"rgba(1,1,1,0.1)\"};//y si no que sea este otro\r\n\r\n    \r\n    return (\r\n      <div className=\"header\">\r\n        <header className=\"cabecera\" style={headerColor}>\r\n          <div className=\"left\">\r\n            <div className=\"icons\" style={headerColor}>\r\n              <AppsIcon fontSize=\"small\" />\r\n            </div>\r\n            <div className=\"icons\" style={headerColor}>\r\n              <HomeOutlinedIcon fontSize=\"small\" />\r\n            </div>\r\n            <div className=\"icons\" style={headerColor}>\r\n              <DashboardOutlinedIcon fontSize=\"small\" />\r\n              <span className=\"icon_title\">Tableros</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"center\">\r\n            <Link to=\"/boards\" className=\"logo_header\">\r\n              <img src={logo_header} alt=\"\" />\r\n            </Link>\r\n          </div>\r\n\r\n          <div className=\"right\">\r\n            <div className=\"icons\" style={headerColor}>\r\n              <AddOutlinedIcon />\r\n            </div>\r\n            <div className=\"icons\" style={headerColor}>\r\n              <InfoOutlinedIcon />\r\n            </div>\r\n            <div className=\"icons\" style={headerColor}>\r\n              <NotificationsNoneOutlinedIcon />\r\n            </div>\r\n            <div className=\"icons_image\">\r\n              <Avatar>{nickLogged.charAt(0)}</Avatar> {/* dentro del avatar a nicklogged le pasamos la propiedad charAt en la poscicion 0 para coger la primera letra del nombre del usuario y pintarla */}\r\n            </div>\r\n            <div className=\"logout\">\r\n              <button onClick={() => logout()}><Link to=\"/\">salir</Link></button> {/* aqui ejecutamos la funcion logout con un evento onClick que redirije auromaticamente fuera con el link to */}\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst AdaptiveHeader = withRouter(Header)//parte de la funcionalidad del header reactivo\r\nexport default AdaptiveHeader;\r\n","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\Boards\\Boards.jsx",["66"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../Header/Header\";\r\nimport \"./Boards.css\";\r\nimport DashboardOutlinedIcon from \"@material-ui/icons/DashboardOutlined\";\r\nimport PersonOutlineOutlinedIcon from \"@material-ui/icons/PersonOutlineOutlined\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport ModalCenter from \"../ModalCenter/ModalCenter\";\r\nimport Axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Boards() {//función boards\r\n  const userId = localStorage.getItem(\"userId\");//guardamos en una variable llamada userId el userId que cogemos del localStorage\r\n  const [boards, setBoards] = useState([]);//y aqui es donde se guardan los boards\r\n\r\n  useEffect(() => {//cuando carga la pagina se hace automaticamente esta funcion mediante el useEffect\r\n     Axios.get(`http://localhost:3000/boards/`+ userId).then((res) => {//hacemos un llamado al endpoint del backend y le pasamos el id de usuario para que nos devuelva todas las boards que tiene ese usuario\r\n      const boards = res.data;//lo que sacas de hacer la peticion del endpoint\r\n      setBoards(boards);// y lo guardas en la variable que se muestra en el usestate de arriba\r\n      console.log(boards);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"boards\">\r\n      <Header />\r\n      <div className=\"boards_general\">\r\n        <div className=\"boards_left\">\r\n          <div className=\"caja_tablero\">\r\n            <DashboardOutlinedIcon fontSize=\"small\" />\r\n\r\n            <span className=\"icon_title2\">Tableros</span>\r\n          </div>\r\n          <div className=\"caja_tablero2\">\r\n            <DashboardOutlinedIcon fontSize=\"small\" />\r\n\r\n            <span className=\"icon_title2\">Plantillas</span>\r\n          </div>\r\n          <div className=\"caja_tablero2\">\r\n            <DashboardOutlinedIcon fontSize=\"small\" />\r\n\r\n            <span className=\"icon_title2\">Inicio</span>\r\n          </div>\r\n          <div className=\"equipos1\">\r\n            <p>Equipos</p>\r\n          </div>\r\n          <div className=\"equipos2\">\r\n            <AddOutlinedIcon color=\"action\" fontSize=\"small\" />\r\n\r\n            <span className=\"icon_title2\">Cree un equipo</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"boards_center\">\r\n          <div className=\"titulo_tableros\">\r\n            <AddOutlinedIcon color=\"action\" />\r\n            <span className=\"tablero_title\">Creación de Nuevo Tablero</span>\r\n          </div>\r\n          <ModalCenter />\r\n          <div className=\"titulo_tableros\">\r\n            <PersonOutlineOutlinedIcon color=\"action\" />\r\n            <span className=\"tablero_title\">Tableros personales</span>\r\n          </div>\r\n\r\n          <div className=\"main_tableros\">\r\n            {boards?.map((board) => (//hacemos un mapeo de todas las boards para que se vayan pintando \r\n              <Link className=\"ancla_personal_board\" to={\"/board/\" + board.id}>\r\n                <div className=\"tableros\" style={{ background: board.color }}>\r\n                  <h4 className=\"tableros_title\">{board.name}</h4>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Boards;\r\n","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\ModalCenter\\ModalCenter.jsx",[],"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\PersonalBoard\\PersonalBoard.jsx",["67","68","69","70","71","72"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AdaptiveHeader from \"../Header/Header\";\r\nimport \"./PersonalBoard.css\";\r\nimport Axios from \"axios\";\r\nimport DashboardOutlinedIcon from \"@material-ui/icons/DashboardOutlined\";\r\nimport StarBorderOutlinedIcon from \"@material-ui/icons/StarBorderOutlined\";\r\nimport ModalTask from \"../ModalTask/ModalTask\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport { util } from \"../../util\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\nfunction PersonalBoard() {\r\n  const { id } = useParams();\r\n  const [personalBoards, setPersonalBoards] = useState(\"\");\r\n  const [newPlank, setNewPlank] = useState(\"\");\r\n  const [personalPlanks, setPersonalPlanks] = useState([]);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [plank, setPlank] = useState(\"\");\r\n  \r\n    \r\n\r\n  const nickLogged = localStorage.getItem(\"name\");\r\n  /* console.log(nameLogged); */\r\n\r\n  useEffect(() => {\r\n    Axios.get(`http://localhost:3000/boards/board/` + id).then((res) => {\r\n      const personalBoards = res.data;\r\n      setPersonalBoards(personalBoards);\r\n      console.log(personalBoards);\r\n    });\r\n    Axios.get(`http://localhost:3000/planks/` + id).then((res) => {\r\n      const planks = res.data;\r\n      setPersonalPlanks(planks);\r\n      console.log(\"soy una lista preciosa\" + personalPlanks);\r\n    });\r\n    Axios.get(`http://localhost:3000/tasks/` + plank.id).then((res) => {\r\n      const tasks = res.data;\r\n      setTasks(tasks);\r\n      console.log(\"soy una tarea preciosa\" + tasks);\r\n    });\r\n  }, []);\r\n\r\n  const deletePlank = (id) => {\r\n    Axios.delete(`http://localhost:3000/planks/` + id).then((res) => {\r\n      const plank = res.data;\r\n      /* personalPlanks = personalPlanks.filter(function(plank) {\r\n        return plank.id !== id; \r\n      });\r\n      console.log(personalPlanks); */\r\n\r\n      const newPlanks = personalPlanks.filter((item) => item.id !== id);\r\n      setPersonalPlanks(newPlanks);\r\n      console.log(newPlanks);\r\n      console.log(\"la lista a sido eliminada\" + plank);\r\n    });\r\n  };\r\n\r\n  const [datos, setDatos] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    setDatos({\r\n      ...datos,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const keyPressed = ({ key }) => {\r\n    // Capture search on Enter key\r\n    if (key === \"Enter\") {\r\n      onSubmit();\r\n    }\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const plank = {\r\n      name: datos.name,\r\n      boardId: id,\r\n      /* userId: userId, */\r\n    };\r\n\r\n    Axios.post(\"http://localhost:3000/planks/create\", plank).then((res) => {\r\n      const newPlank = res.data;\r\n      setNewPlank(newPlank);\r\n      console.log(\"lista creada: \", newPlank);\r\n      setPersonalPlanks((personalPlanks) => personalPlanks.concat(newPlank));\r\n    });\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onSubmit2 = (event) => {\r\n    event.preventDefault();\r\n\r\n    const task = {\r\n      description: datos.description,\r\n      plankId: personalPlanks.id, \r\n    };\r\n\r\n    Axios.post(\"http://localhost:3000/tasks/create\", task).then((res) => {\r\n      const newTask = res.data;\r\n      handleClose();\r\n      console.log(\"tarea creada: \", newTask);\r\n    });\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"personal_boards\">\r\n      <div\r\n        className=\"personal_main\"\r\n        style={{ background: personalBoards?.color }}\r\n      >\r\n        <AdaptiveHeader />\r\n\r\n        <div className=\"personal_menu\">\r\n          <div className=\"personal_menu_left\">\r\n            <div className=\"personal_menu_buttons\">\r\n              <DashboardOutlinedIcon fontSize=\"small\" />\r\n              <p>Tablero</p>\r\n            </div>\r\n            <div className=\"personal_menu_buttons\">\r\n              <h1>{personalBoards?.name}</h1>\r\n            </div>\r\n            <div className=\"personal_menu_buttons\">\r\n              <StarBorderOutlinedIcon fontSize=\"small\" />\r\n            </div>\r\n            <div className=\"personal_menu_buttons\">\r\n              <p>Espacio de trabajo de trello free</p>\r\n            </div>\r\n            <div className=\"personal_menu_buttons\">\r\n              <p>Visible para el equipo</p>\r\n            </div>\r\n            <div className=\"personal_menu_buttons_avatar\">\r\n              <span className=\"personal_board_avatar\">\r\n                <Avatar>{nickLogged.charAt(0)}</Avatar>\r\n              </span>\r\n            </div>\r\n            <div className=\"personal_menu_buttons\">\r\n              <p>invitar</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"personal_menu_right\">\r\n            <form onSubmit={onSubmit}>\r\n              <div className=\"new_plank\">\r\n                <input\r\n                  onChange={handleInputChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  required\r\n                  placeholder=\"Introduzca el título de la lista...\"\r\n                  onKeyPress={keyPressed}\r\n                />\r\n\r\n                <button type=\"submit\">\r\n                  <AddOutlinedIcon fontSize=\"large\" />\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"main_plank\">\r\n          {personalPlanks?.map((plank) => (\r\n            <div className=\"plank\" key={plank.id}>\r\n              \r\n              <div className=\"plank_div\">\r\n                <h2 className=\"plank_name\">{plank.name}</h2>\r\n                <span onClick={() => deletePlank(plank.id)}>\r\n                  <CloseOutlinedIcon fontSize=\"small\" />\r\n                </span>\r\n              </div>\r\n              <div className=\"modal_board_button\">\r\n                <div onClick={handleOpen} className=\"task_button\">\r\n                  <button type=\"submit\">\r\n                    <AddOutlinedIcon fontSize=\"medium\" />\r\n                    Añada otra tarjeta\r\n                  </button>\r\n                </div>\r\n\r\n                <Modal\r\n                  disableEnforceFocus\r\n                  disableAutoFocus\r\n                  aria-labelledby=\"transition-modal-title\"\r\n                  aria-describedby=\"transition-modal-description\"\r\n                  className={classes.modal}\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  closeAfterTransition\r\n                  BackdropComponent={Backdrop}\r\n                  BackdropProps={{\r\n                    timeout: 500,\r\n                  }}\r\n                >\r\n                  <Fade in={open}>\r\n                    <div className=\"modal_board_task\">\r\n                      <form onSubmit={onSubmit2}>\r\n                        <input\r\n                          onChange={handleInputChange}\r\n                          type=\"text\"\r\n                          name=\"description\"\r\n                          placeholder=\"Introduzca un título para esta tarjeta...\"\r\n                        />\r\n                        <div className=\"modal_button\">\r\n                          <button type=\"submit\">Añadir tarjeta</button>\r\n                          <span onClick={handleClose}>\r\n                            <CloseOutlinedIcon fontSize=\"medium\" />\r\n                          </span>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </Fade>\r\n                </Modal>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PersonalBoard;\r\n","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\util.js",[],"C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\ModalTask\\ModalTask.jsx",["73"],"import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./ModalTask.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Axios from \"axios\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\r\nimport { util } from \"../../util\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function TransitionsModal() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const { id } = useParams();\r\n\r\n  /* const userId = localStorage.getItem(\"userId\"); */\r\n\r\n  const [datos, setDatos] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    setDatos({\r\n      ...datos,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const task = {\r\n      description: datos.description,\r\n      plankId: id, \r\n    };\r\n\r\n    Axios.post(\"http://localhost:3000/tasks/create\", task).then((res) => {\r\n      const newTask = res.data;\r\n      \r\n      \r\n      handleClose();\r\n      console.log(\"tarea creada: \", newTask);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleOpen} className=\"task_button\">\r\n        <button type=\"submit\">\r\n          <AddOutlinedIcon fontSize=\"medium\" />\r\n          Añada otra tarjeta\r\n        </button>\r\n      </div>\r\n\r\n      <Modal\r\n        disableEnforceFocus\r\n        disableAutoFocus\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className=\"modal_board_task\">\r\n            <form onSubmit={onSubmit}>\r\n              <input\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Introduzca un título para esta tarjeta...\"\r\n              />\r\n              <div className=\"modal_button\">\r\n                <button type=\"submit\">Añadir tarjeta</button>\r\n                <span onClick={handleClose}>\r\n                  <CloseOutlinedIcon fontSize=\"medium\" />\r\n                </span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Jose\\Desktop\\PROYECTOS_POWER_UP\\clon_de_trello\\frontend\\clon_trello_frontend\\src\\components\\ProtectedRoute\\ProtectedRoute.jsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":12,"column":10,"nodeType":"80","messageId":"81","endLine":12,"endColumn":15},{"ruleId":"78","severity":1,"message":"82","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"83","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"84","line":12,"column":10,"nodeType":"80","messageId":"81","endLine":12,"endColumn":20},{"ruleId":"78","severity":1,"message":"85","line":13,"column":10,"nodeType":"80","messageId":"81","endLine":13,"endColumn":20},{"ruleId":"78","severity":1,"message":"86","line":16,"column":10,"nodeType":"80","messageId":"81","endLine":16,"endColumn":20},{"ruleId":"78","severity":1,"message":"87","line":48,"column":13,"nodeType":"80","messageId":"81","endLine":48,"endColumn":18},{"ruleId":"78","severity":1,"message":"88","line":48,"column":30,"nodeType":"80","messageId":"81","endLine":48,"endColumn":37},{"ruleId":"89","severity":1,"message":"90","line":21,"column":6,"nodeType":"91","endLine":21,"endColumn":8,"suggestions":"92"},{"ruleId":"78","severity":1,"message":"93","line":8,"column":8,"nodeType":"80","messageId":"81","endLine":8,"endColumn":17},{"ruleId":"78","severity":1,"message":"94","line":12,"column":10,"nodeType":"80","messageId":"81","endLine":12,"endColumn":14},{"ruleId":"78","severity":1,"message":"95","line":22,"column":10,"nodeType":"80","messageId":"81","endLine":22,"endColumn":18},{"ruleId":"78","severity":1,"message":"96","line":24,"column":10,"nodeType":"80","messageId":"81","endLine":24,"endColumn":15},{"ruleId":"78","severity":1,"message":"97","line":25,"column":17,"nodeType":"80","messageId":"81","endLine":25,"endColumn":25},{"ruleId":"89","severity":1,"message":"98","line":48,"column":6,"nodeType":"91","endLine":48,"endColumn":8,"suggestions":"99"},{"ruleId":"78","severity":1,"message":"94","line":11,"column":10,"nodeType":"80","messageId":"81","endLine":11,"endColumn":14},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'makeStyles' is defined but never used.","'deepOrange' is defined but never used.","'useHistory' is defined but never used.","'match' is assigned a value but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'ModalTask' is defined but never used.","'util' is defined but never used.","'newPlank' is assigned a value but never used.","'tasks' is assigned a value but never used.","'setPlank' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'personalPlanks', and 'plank.id'. Either include them or remove the dependency array.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [userId]",{"range":"108","text":"109"},"Update the dependencies array to be: [id, personalPlanks, plank.id]",{"range":"110","text":"111"},[1249,1251],"[userId]",[1864,1866],"[id, personalPlanks, plank.id]"]